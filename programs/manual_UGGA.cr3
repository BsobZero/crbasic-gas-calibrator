' Program to assess calibration of Los Gatos Research UGGA CH4/CO2 instrument
' Could be trivially adapated to any other gas analyzer
'
' Patrick O'Keeffe (c) 2015 
' Laboratory for Atmospheric Research at Washington State University

Const THIS_YEAR = 2015

Const MBAR_PER_TORR = 1.3332237

Const CH4_COM = Com2
Const CH4_BAUD = 19200
Const CH4_FMT = 3 '8/n/1
Const CH4_BUFF = 800

Dim disable_ugga As Boolean
Dim ch4_record As String * 400
Dim ch4_year
Dim ugga(25)
'1: date (only year captured)   '2: time (only hour captured)
Alias ugga(3)  = ugga_CH4        '4: CH4 s.d.
Alias ugga(5)  = ugga_H2O        '6: H2O s.d.
Alias ugga(7)  = ugga_CO2        '8: CO2 s.d.
Alias ugga(9)  = ugga_CH4_dry    '10: CH4 dry s.d.
Alias ugga(11) = ugga_CO2_dry    '12: CO2 dry s.d.
Alias ugga(13) = ugga_gas_P      '14: gas P s.d.
Alias ugga(15) = ugga_gas_T      '16: gas T s.d.
Alias ugga(17) = ugga_self_T     '18: self T s.d.
Alias ugga(19) = ugga_ringdown0  '20: ringdown #0 s.d.
Alias ugga(21) = ugga_ringdown1  '22: ringdown #1 s.d.
Alias ugga(23) = ugga_fit_flag   '24: MIU valve
'25: MIU description
Units ugga_CH4 = ppm
Units ugga_H2O = ppm
Units ugga_CO2 = ppm
Units ugga_CH4_dry = ppm (dry)
Units ugga_CO2_dry = ppm (dry)
Units ugga_gas_P = mbar
Units ugga_gas_T = degC
Units ugga_self_T = degC
Units ugga_ringdown0 = usec
Units ugga_ringdown1 = usec
Units ugga_fit_flag = arb

Dim run_conc(4)
Alias run_conc(1) = run_conc_ch4
Alias run_conc(2) = run_tolr_ch4
Alias run_conc(3) = run_conc_co2
Alias run_conc(4) = run_tolr_co2
Units run_conc = ppm

Dim run_finished As Boolean
Dim is_running As Boolean
Dim status As String * 16
Dim run_cylref As String * 32
Dim run_notes As String * 64

Public run_mode_ON As Boolean
Public ref_conc(4)
Alias ref_conc(1) = ref_conc_ch4
Alias ref_conc(2) = ref_tolr_ch4
Alias ref_conc(3) = ref_conc_co2
Alias ref_conc(4) = ref_tolr_co2
Public cylref As String * 32
Public notes As String * 64
Units ref_conc = ppm

Public ch4_dry 'for monitoring
Public co2_dry 'for monitoring
Public duration
Units ch4_dry = ppm
Units co2_dry = ppm
Units duration = sec

'================================= TABLES
DataTable(tsdata,True,10000)
  DataInterval(0,1,Sec,5)
  Sample(1,duration,IEEE4)
  Sample(1,ugga_CH4,IEEE4)
  Sample(1,ugga_H2O,IEEE4)
  Sample(1,ugga_CO2,IEEE4)
  Sample(1,ugga_CH4_dry,IEEE4)
  Sample(1,ugga_CO2_dry,IEEE4)
  Sample(1,ugga_gas_P,IEEE4)
  Sample(1,ugga_gas_T,IEEE4)
  Sample(1,ugga_self_T,IEEE4)
  Sample(1,ugga_ringdown0,IEEE4)
  Sample(1,ugga_ringdown1,IEEE4)
  Sample(1,ugga_fit_flag,IEEE4)
EndTable

DataTable(stats,run_finished,1000)
  OpenInterval
  Sample(1,duration,FP2)
  Average(1,ugga_CH4,IEEE4,disable_ugga OR ugga_CH4=NAN)
  StdDev(1,ugga_CH4,FP2,disable_ugga OR ugga_CH4=NAN)
  Average(1,ugga_CH4_dry,IEEE4,disable_ugga OR ugga_CH4_dry=NAN)
  StdDev(1,ugga_CH4_dry,FP2,disable_ugga OR ugga_CH4_dry=NAN)
  Average(1,ugga_CO2,IEEE4,disable_ugga OR ugga_CO2=NAN)
  StdDev(1,ugga_CO2,IEEE4,disable_ugga OR ugga_CO2=NAN)
  Average(1,ugga_CO2_dry,IEEE4,disable_ugga OR ugga_CO2_dry=NAN)
  StdDev(1,ugga_CO2_dry,IEEE4,disable_ugga OR ugga_CO2_dry=NAN)
  Average(1,ugga_H2O,IEEE4,disable_ugga OR ugga_H2O=NAN)
  Sample(1,run_conc_ch4,IEEE4)
    FieldNames("ref_CH4_conc")
  Sample(1,run_tolr_ch4,IEEE4)
    FieldNames("ref_CH4_tolerance")
  Sample(1,run_conc_co2,IEEE4)
    FieldNames("ref_CO2_conc")
  Sample(1,run_tolr_co2,IEEE4)
    FieldNames("ref_CO2_tolerance")
  Sample(1,run_cylref,String)
    FieldNames("ref_cylinder")
  Sample(1,run_notes,String)
    FieldNames("notes")
EndTable

'======================= MENU
Const Off = False
Const Recording = True
DisplayMenu("UGGA Validation",-2)
  SubMenu("Specify gases")
    MenuItem("CH4 conc, ppm", ref_conc_ch4)
    MenuItem("CH4 tolerance, ppm", ref_tolr_ch4)
    MenuItem("CO2 conc, ppm", ref_conc_co2)
    MenuItem("CO2 tolerance, ppm", ref_tolr_co2)
    'MenuItem("Notes", notes)
  EndSubMenu
  MenuItem("Run mode", run_mode_ON)
    MenuPick(Off, Recording)
  DisplayValue("Status", status)
  DisplayValue("Dry CH4, ppb", ugga_CH4_dry)
  DisplayValue("Dry CO2, ppb", ugga_CO2_dry)
EndMenu


BeginProg
  SerialOpen(CH4_COM,CH4_BAUD,CH4_FMT,0,CH4_BUFF)
  status = "Waiting"

	Scan (500,mSec,0,0)
    SerialIn(ch4_record,CH4_COM,5,&h0A,CH4_BUFF)
    If (Len(ch4_record)) Then
      SplitStr(ugga(1),ch4_record,", ",25,6)
      ch4_year = ugga(1) 'convert string->float
      'HACK - compare record year with logger timestamp to verify correctly parsed
      disable_ugga = NOT(ch4_year = THIS_YEAR)
      ugga_gas_P *= MBAR_PER_TORR
      ch4_dry = ugga_CH4_dry
      co2_dry = ugga_CO2_dry
    ElseIf (ch4_year = NAN) Then
      'do nothing, UGGA vars already set to NAN
      disable_ugga = True
      'SerialFlush(CH4_COM)
    Else
      Move(ugga(1),25,NAN,1)
      ch4_year = NAN
    EndIf
    CallTable(tsdata)
    
    If (run_mode_ON) Then
      If (is_running) Then
        'business as usual during a run
        duration = Timer(1,Sec,4) 'read only
        CallTable(stats)
      Else
        'run was just initiated
        run_conc_ch4 = IIF(ref_conc_ch4 < 0, NAN, ref_conc_ch4)
        run_tolr_ch4 = IIF(ref_conc_ch4 < 0 OR ref_tolr_ch4 < 0, NAN, ref_tolr_ch4)
        run_conc_co2 = IIF(ref_conc_co2 < 0, NAN, ref_conc_co2)
        run_tolr_co2 = IIF(ref_conc_co2 < 0 OR ref_tolr_co2 < 0, NAN, ref_tolr_co2)
        run_notes = notes
        run_cylref = cylref
        duration = Timer(1,Sec,0) 'reset and start
        is_running = True
        status = "Recording"
      EndIf
    ElseIf (is_running) Then
        'run was just ended
        duration = Timer(1,Sec,1) 'stop
        is_running = False
        run_finished = True
        CallTable(stats)
        run_finished = False
        duration = Timer(1,Sec,3) 'reset
        status = "Waiting"
    EndIf

	NextScan
EndProg

